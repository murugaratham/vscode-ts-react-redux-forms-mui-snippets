{
  "Typescript-React: basic typescript SFC template": {
    "prefix": "_tsrsfc",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface ${1:ComponentName}Props {",
      "  // props",
      "}",
      "",
      "const ${1:ComponentName}: React.SFC<${1:ComponentName}Props> = props => {",
      "  // const { props } = props;",
      "  return (",
      "    ${2:<span>Body</span>}",
      "  );",
      "}",
      "",
      "export default ${1:ComponentName};"
    ]
  },
  "Typescript-React: basic typescript react component template": {
    "prefix": "_tsr",
    "body": [
      "import * as React from 'react';",
      "",
      "interface I${1:ComponentName}Props {",
      "  // props",
      "}",
      "",
      "interface I${1:ComponentName}State {",
      "  // state",
      "}",
      "",
      "export default class ${1:ComponentName} extends React.Component<I${1:ComponentName}Props, I${1:ComponentName}State> {",
      "  public render() {",
      "    return (",
      "      ${2:<span>Body</span>}",
      "    );",
      "  }",
      "}"
    ]
  },
  "Typescript-React: typescript react component with MUI template ": {
    "prefix": "_tsrm",
    "body": [
      "import * as React from 'react';",
      "import { compose } from 'redux';",
      "import { Theme, withStyles, WithStyles, createStyles } from '@material-ui/core/styles';",
      "",
      "const styles = (theme: Theme) =>",
      "  createStyles({",
      "    // custom JSS",
      "  });",
      "",
      "interface I${1:ComponentName}Props {",
      "  ",
      "}",
      "",
      "interface I${1:ComponentName}State {",
      "  ",
      "}",
      "",
      "type I${1:ComponentName}PropsWithStyle = I${1:ComponentName}Props & WithStyles<typeof styles>",
      "",
      "class ${1:ComponentName} extends React.Component<I${1:ComponentName}Props, I${1:ComponentName}State> {",
      "  constructor(props: I${1:ComponentName}PropsWithStyle) {",
      "    super(props);",
      "",
      "    this.state = {",
      "      // state",
      "    };",
      "    // event binding",
      "  }",
      "",
      "  public render() {",
      "    const { classes } = this.props;",
      "    return (",
      "      ${2:<span>Body</span>}",
      "    );",
      "  }",
      "}",
      "",
      "export default compose(",
      "  withStyles,",
      ")(${1:ComponentName});"
    ]
  },
  "Typescript-React: typescript react component with MUI & react-i18next template ": {
    "prefix": "_tsrmi18",
    "body": [
      "import * as React from 'react';",
      "import { compose } from 'redux';",
      "import { Theme, withStyles, WithStyles, createStyles } from '@material-ui/core/styles';",
      "import { InjectedTranslateProps, translate } from 'react-i18next';",
      "",
      "const styles = (theme: Theme) =>",
      "  createStyles({",
      "    // custom JSS",
      "  });",
      "",
      "interface I${1:ComponentName}Props {",
      "  // props",
      "}",
      "",
      "interface I${1:ComponentName}State {",
      "  // state",
      "}",
      "",
      "type I${1:ComponentName}PropsWithStyle = I${1:ComponentName}Props & InjectedTranslateProps & WithStyles<typeof styles>",
      "",
      "class ${1:ComponentName} extends React.Component<I${1:ComponentName}Props, I${1:ComponentName}State> {",
      "  constructor(props: I${1:ComponentName}PropsWithStyle) {",
      "    super(props);",
      "",
      "    this.state = {",
      "      // state",
      "    };",
      "    // event binding",
      "}",
      "",
      "  public render() {",
      "    const { t, classes } = this.props;",
      "    return (",
      "      ${2:<span>Body</span>}",
      "    );",
      "  }",
      "}",
      "",
      "export default compose(",
      "  withStyles,",
      "  translate",
      ")(${1:ComponentName});"
    ]
  },
  "Typescript-React: basic typescript react redux container template": {
    "prefix": "_tsrr",
    "body": [
      "import { connect } from 'react-redux';",
      "import { compose, Action, Dispatch } from 'redux';",
      "",
      "interface I${1:ComponentName}OwnProps {",
      "  // own props",
      "}",
      "",
      "const mapStateToProps = (state: ${2:IApplicationState}, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}StateProps => {",
      "  return {",
      "    // ...mapStateToProps",
      "  };",
      "};",
      "",
      "const mapDispatchToProps = (dispatch: Dispatch<Action>, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}DispatchProps => {",
      "  return {",
      "    // ...mapDispatchToProps",
      "  };",
      "};",
      "",
      "export default compose<React.ComponentType<I${1:ComponentName}OwnProps>>(",
      "  connect(",
      "    mapStateToProps,",
      "    mapDispatchToProps",
      "  ),",
      ")(${1:ComponentName});"
    ]
  },
  "Typescript-React: typescript react redux redux-form container template": {
    "prefix": "_tsrrf",
    "body": [
      "import { connect } from 'react-redux';",
      "import { compose, Action, Dispatch } from 'redux';",
      "import { reduxForm, ConfigProps } from 'redux-form';",
      "",
      "const reduxFormConfig: ConfigProps = {",
      "  form: '', // Redux form id",
      "  destroyOnUnmount: true,",
      "  forceUnregisterOnUnmount: true,",
      "  enableReinitialize: false,",
      "};",
      "",
      "interface I${1:ComponentName}OwnProps {",
      "  // own props",
      "}",
      "",
      "const mapStateToProps = (state: ${2:IApplicationState}, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}StateProps => {",
      "  return {",
      "    // ...mapStateToProps",
      "  };",
      "};",
      "",
      "const mapDispatchToProps = (dispatch: Dispatch<Action>, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}DispatchProps => {",
      "  return {",
      "    // ...mapDispatchToProps",
      "  };",
      "};",
      "",
      "export default compose<React.ComponentType<I${1:ComponentName}OwnProps>>(",
      "  connect<I${1:ComponentName}StateProps, I${1:ComponentName}DispatchProps, I${1:ComponentName}OwnProps, IApplicationState>(",
      "    mapStateToProps,",
      "    mapDispatchToProps",
      "  ),",
      "  reduxForm(reduxFormConfig)",
      ")(${1:ComponentName});"
    ]
  },
  "Typescript-React: constructor": {
    "prefix": "_con",
    "body": ["constructor(props: I${1:ComponentName}Props) {", "  super(props);", "  ${2}", "}", "${3}"]
  },
  "Typescript-React: componentDidMount": {
    "prefix": "_cdm",
    "body": "public componentDidMount() {\n  ${1}\n}\n${2}"
  },
  "Typescript-React: shouldComponentUpdate": {
    "prefix": "_scup",
    "body": [
      "public shouldComponentUpdate(prevProps: Readonly<I${1:ComponentName}Props>, prevState: Readonly<I${1:ComponentName}State>): boolean {",
      "  ${2}",
      "  return true;",
      "}",
      "${3}"
    ]
  },
  "Typescript-React: getSnapshotBeforeUpdate": {
    "prefix": "_gssbu",
    "body": [
      "public getSnapshotBeforeUpdate(prevProps: Readonly<I${1:ComponentName}Props>, prevState: Readonly<I${1:ComponentName}State>) {",
      "  ${2}",
      "  return null;",
      "}",
      "${3}"
    ]
  },
  "Typescript-React: componentDidCatch": {
    "prefix": "_cdc",
    "body": ["public componentDidCatch(error: Error, errorInfo: ErrorInfo) {", "  ${2}", "}", "${3}"]
  },
  "Typescript-React: getDerivedStateFromProps": {
    "prefix": "_gdsfp",
    "body": [
      "static getDerivedStateFromProps(nextProps: Readonly<I${1:ComponentName}Props>, prevState: I${1:ComponentName}State): Partial<I${1:ComponentName}State> {",
      "  ${2}",
      "  return {",
      "    // derive your state here",
      "  }",
      "}",
      "${3}"
    ]
  },
  "Typescript-React: componentDidUpdate": {
    "prefix": "_cdup",
    "body": ["public componentDidUpdate(prevProps: I${1:ComponentName}Props, prevState: I${1:ComponentName}State) {", "  ${2}", "}", "${3}"]
  },
  "Typescript-React: componentWillUnmount": {
    "prefix": "_cwun",
    "body": ["public componentWillUnmount() {", "  ${1}", "}", "${2}"]
  }
}
